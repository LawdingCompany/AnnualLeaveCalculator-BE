name: Deploy Leavecalc to EC2 (DockerHub + SSM)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. AWS credentials (SSM 실행용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 3. DockerHub 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4. Docker 이미지 빌드 & 푸시
      - name: Build and Push Docker Image
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/leavecalc:latest
          docker build --no-cache -t $IMAGE ./backend/leavecalc
          docker push $IMAGE

      # 5. EC2에서 컨테이너 실행 (SSM)
      - name: Deploy on EC2 via SSM
        run: |
          INSTANCE_ID=${{ secrets.EC2_INSTANCE_ID }}
          IMAGE=${{ secrets.DOCKER_USERNAME }}/leavecalc:latest

          aws ssm send-command \
            --cli-binary-format raw-in-base64-out \
            --targets "Key=instanceIds,Values=$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy leavecalc" \
            --parameters '{
              "commands": [
                "set -e",
                "docker pull '"$IMAGE"'",
                "docker stop leavecalc || true",
                "docker rm leavecalc || true",
                "docker run -d --name leavecalc -p 8080:8080 --restart=always --log-driver=awslogs --log-opt awslogs-region=ap-northeast-2 --log-opt awslogs-group=/ec2/leavecalc --log-opt awslogs-create-group=true --log-opt awslogs-stream='"$INSTANCE_ID"'-leavecalc -e TZ=Asia/Seoul -e JAVA_TOOL_OPTIONS=-Duser.timezone=Asia/Seoul -e SPRING_JACKSON_TIME_ZONE=Asia/Seoul -e SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_TIME_ZONE=Asia/Seoul -e RDS_HOST=${{ secrets.RDS_HOST }} -e DB_NAME=${{ secrets.DB_NAME }} -e DB_USERNAME=${{ secrets.DB_USERNAME }} -e INTERNAL_AUTH_SECRET=${{ secrets.INTERNAL_AUTH_SECRET }} -e AWS_REGION=${{ secrets.AWS_REGION }} '"$IMAGE"'",
                "docker image prune -f || true"
              ]
            }'
